
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="stylesheet" href="style.css" />
    <title>Code Wars Study Site</title>
  </head>
  <body>
	  <div class='title'><p>Created for notes on 3/25/22</p><h1>Code Wars Study Guide</h1><p>Author: Jarett Young</p></div>
<div class='body'>
	<div class='segment'>
	<ul>
		<li><a href='#link1'>Sort a number in descending order</a></li>
		<li><a href='#link2'>Convert number to reversed array of digits</a></li>
		<li><a href='#link3'>Given an array of integers your solution should find the smallest integer</a></li>
		<li><a href='#link4'>Letters must be between a and m</a></li>
	</ul>
	</div>

	<div class="segment"><h3 id='link1' style='text-align: center;'>Sort a number in descending order</h3>
		<p>One way you can achieve this is by using the sort method.</p>
	<pre><code>
const descendNumber = function (number) {
  const numArray = Array.from(number.toString()).sort().reverse();
  return Number(numArray.join(''));
};
	</code></pre>
		<p>So here we first change the number into a string, and then we must turn it into an array in order to sort it, and then reverse it. Then we join the array back into a sring and then turn it into a number. </p>
	</div>
	<div class="segment"><h3 id='link2' style='text-align: center;'>Convert number to reversed array of digits</h3>
		<p>To achieve this we do the same steps initially that we did in the previous challenge. And then after the number is reversed and in an array as a list of strings, turning it into an array of numbers requires us to iterate over the array of strings and turn each string into a number.</p>
	<pre><code>
const reverseArray = function (n) {
  const numArray = Array.from(n.toString()).reverse();
  for ( i = 0; i &lt; numArray.length; i++) {
    numArray[i] = Number(numArray[i]);
  }
  return numArray;
};
	</code></pre>
		<p>Another way to accomplish the same thing</p>
	<pre><code>
function digitize(n) {
  return String(n).split('').map(Number).reverse();
}
	</code></pre>
		<p>Here we turn it into a string and then split it which creates the array. Then we map the values and turn them into numbers and then reverse them. Doing the same thing in fewer lines of code. </p>
		<p>Another way this time we convert the number to a string by type casting.</p>
	<pre><code>
function tryTwo(n) {
  return (n + '').split('').map(Number).reverse();
}
	</code></pre>
	</div>
	<div class="segment"><h3 id='link3' style='text-align: center;'>Given an array of integers your solution should find the smallest integer</h3>
		<p>You can assume that the supplied array will not be empty.</p>
		<p>One way to acomplish this is...</p>
	<pre><code>
function smallestNum(array) {
   n = array[0];
  for (let i = 0; i &lt; array.length; i++) {
    if (array[i] &lt;= n) n = array[i];
  }
  return n;
}
	</code></pre>
		<p>Here begin by setting the first value of the array to a variable. Then we iterate through the array and if the current value is less than then initial value then it is replaced.</p>
		<p>There are easier ways of doing this. First way is to use the Math.min() function. This automatically finds the lowest number of a series</p>
	<pre><code>
function findSmallest(args) {
  return Math.min(...args);
}
	</code></pre>
		<p>Another way to do it is by using the reduce method.</p>
	<pre><code>
function findSmallestInt(args) {
  return args.reduce(function (prev, curr, index, array) {
    return prev &lt; curr ? prev : curr;
  });
}
	</code></pre>
		<p>This method is specifically designed for operations like this because it gives us arguments that are the current value and the previous value, as well as access to the index or the whole array itself.</p>
		<p>Here is yet another way, this time using the sort method.</p>
	<pre><code>
function findSmaller(args) {
  args.sort(function (a, b) {
    return a - b;
  });
  return args[0];
}
	</code></pre>
		<p>I did not realize that you could do a simple function like return a - b to get the smallest integer. The sort function has the ability to take a function that would describe how the values are to be sorted. The return a - b specifically sorts the array in assending order. Then the first element of the array is returned.</p>
		<p>Here is a link to the documentation on the Sort Function <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort'>Link</a></p>
	</div>
	<div class="segment"><h3 id='link4' style='text-align: center;'>Letters must be between a and m</h3>
		<p>Count the number of letters in error, show that divided by the total number of letters.</p>
	<pre><code>
const colors = new Set([
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  'g',
  'h',
  'i',
  'j',
  'k',
  'l',
  'm',
]);
const printErrors = function (s) {
  const printArray = s.split('');
  let error = 0;
  for (const item of printArray) {
    if (!colors.has(item)) error++;
  }
  return `${error}/${s.length}`;
};
	</code></pre>
		<p>This worked but there are better ways, I found to accomplishing the same thing.</p>
		<p>This is another way where they implement the notion that greater than or less than can be used in the alphabet. I didn't know that.</p>
		<pre><code>
function printerError(s) {
  // your code
  var count = 0;
  for (var i = 0; i &lt; s.length; i++) {
    if (s[i] &gt; 'm') {
      /// less/greater than works in the alphabet
      count++;
    }
  }
  return count + '/' + s.length;
}
		</code></pre>
		<p>Here is another answer where they used regular expressions to accomplish the task.</p>
		<pre><code>
const prtError = s =&gt; `${s.replace(/[a-m]/gi, '').length}/${s.length}`;
		</code></pre>
		<p>There are quite a few layer to this solution. First the whole thing is in a template literal and within brackets where they are passing the code. The first thing they call is the replace function on the string. Then within the replace function they have their regex. The regex creates a character group and then removes it from the original array. Then the length of the result is displayed. The answer is to be displayed this number over that number and that is where the slash comes in.  </p>
		<p>Here is a link to the Replace method Documentation <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace'>Link</a></p>
		<p>Another solution with regular expressions</p>
		<pre><code>
const printsError = s =&gt; (s.match(/[n-z]/g) || []).length + '/' + s.length;
		</code></pre>
		<p>Here they use the match method instead of the replace method. but everything else is practically the same.</p>
		<p>Here is the link to the Match method Documentation <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match'>Link</a></p>
	</div>
	<div class="segment"><h3 id='link4' style='text-align: center;'>Determine whether a string of only letters is an isogram(no repeats)</h3>
		<p>Take into consideration upper and lower case letters</p>
	<pre><code>
  const dates = function (s) {
  const upper = s.toUpperCase();
  const strSet = [...new Set(upper)].join('');
  return upper === strSet || upper === '';
};
	</code></pre>
	<p>Another way that uses Regex</p>
	<pre><code>
function isaIsogram(str) {
  return !/(\w).*\1/i.test(str);
}
	</code></pre>
	<p>Another way that compares the length of the strings</p>
	<pre><code>
const isIsogram = str =&gt; new Set([...str.toLowerCase()]).size == str.length;
	</code></pre>
	</div>
	<div class="segment"><h3 id='link2' style='text-align: center;'>Output whether member is Open or Senior</h3>
	<p>To be a senior they must be at least 55 and have a handicap greater than 7</p>
	<p>Example [[45, 12],[55,21],[19, -2],[104, 20]]),['Open', 'Senior', 'Open', 'Senior']</p>
	<pre><code>
function openOrSenior(data) {
  const output = [];
  for (const [age, hand] of data) {
    age &gt;= 55 &amp&amp hand &gt; 7 ? output.push('Senior') : output.push('Open');
  }
  return output;
}
	</code></pre>
	<p></p>
	</div>
	</div>
<script src="numbers1.js"></script>
</body>
</html>

</html>
